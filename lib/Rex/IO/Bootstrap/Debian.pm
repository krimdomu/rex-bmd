#
# (c) Jan Gehring <jan.gehring@gmail.com>
# 
# vim: set ts=3 sw=3 tw=0:
# vim: set expandtab:
   
package Rex::IO::Bootstrap::Debian;
   
use strict;
use warnings;

require Rex::IO::Args;

use Cwd qw(getcwd);

use Rex::Commands;
use Rex::Commands::Fs;
use Rex::Commands::File;
use Rex::Commands::Run;
use Rex::Commands::Gather;
use Rex::Commands::Pkg;
use Rex::Commands::User;
use Rex::Commands::Network;

sub new {
   my $that = shift;
   my $proto = ref($that) || $that;
   my $self = { @_ };

   bless($self, $proto);

   return $self;
}

sub get_dist_name {
   return "Debian";
}

sub prepare_repo_data {
   my ($self, $codename) = @_;

   say join ("\n", run "wget -O - http://stage.rex.linux-files.org/DPKG-GPG-KEY-REXIFY-REPO | apt-key add -");

   file "/etc/apt/sources.list",
      content => "# autogenerated by rex.io
deb http://ftp.de.debian.org/debian/ $codename main
deb-src http://ftp.de.debian.org/debian/ $codename main

deb http://security.debian.org/ $codename/updates main
deb-src http://security.debian.org/ $codename/updates main

deb http://ftp.de.debian.org/debian/ $codename-updates main
deb-src http://ftp.de.debian.org/debian/ $codename-updates main
deb http://stage.rex.linux-files.org/debian/ $codename rex
";

   say join("\n", run "apt-get update");

}

sub get_codename_for {
   my ($self, $version) = @_;

   my %codename_for = (
      "6" => "squeeze",
      "5" => "lenny",
   );

   return $codename_for{$version};
}

sub get_mirror {
   my ($self) = @_;
   return "http://ftp.de.debian.org/debian";
}

sub get_kernel {
   my ($self, $arch) = @_;
   return "linux-image-2.6-$arch";
}


sub call {
   my ($self) = @_;

   my $args    = Rex::IO::Args->get;

   my $dist    = $args->{dist};
   my $version = $args->{version};
   my $arch    = $args->{arch};

   my $codename = $self->get_codename_for($version);

   mkdir "nfs-image/filesystem.d";
   mkdir "base-image/filesystem.d";
   mkdir "tftpd-root/pxelinux.cfg";
   mkdir "log";

   if(is_debian) {
      say "Creating nfs-image...";
      run "debootstrap --arch=$arch $codename nfs-image/filesystem.d " . $self->get_mirror() . " 2>&1 >log/bootstrap.log";
   }
   else {
      print "To create debian/ubuntu images you must use a debian/ubuntu system.";
      exit 1;
   }

   file "$::path/nfs-image/filesystem.d/etc/resolv.conf",
      content => cat "/etc/resolv.conf";

   file "$::path/nfs-image/filesystem.d/etc/hosts",
      source => "/etc/hosts";

   # forking the chrooted task
   my $pid = fork;
   if($pid == 0) {
      run "mount -obind /dev $::path/nfs-image/filesystem.d/dev";
      chroot "$::path/nfs-image/filesystem.d/";
      chdir "/";
      run "mount -t proc proc /proc";
      run "mount -t sysfs sysfs /sys";

      if(is_debian) {
         say "Running apt-get update";
         run "apt-get update";

         eval {
            say "Installing wget and libdigest-perl";
            run "apt-get -y install wget";

            $self->prepare_repo_data($codename);

            run "apt-get -y install libdigest-perl";
         };

         say "Installing rex";
         run "apt-get -y install rex rex-io";

         mkdir "/boot/grub";
         file "/boot/grub/menu.lst",
            content => "";

         if(operating_system_version() =~ m/^5/) {
            # on debian 5 create a special file
            file "/etc/kernel-img.conf",
               content => "do_initrd=yes\n";
         }

         install package => [qw/wget grub-pc
                                parted perl syslinux locales lvm2
                                libwww-perl libyaml-perl initramfs-tools/];

         install package => $self->get_kernel($arch);

         file "/etc/hostname",
            content => "nfs-image\n";

         file "/etc/fstab",
            content => "# automated generated fstab for nfs boot
proc            /proc           proc    defaults        0       0
/dev/nfs        /               nfs     defaults        1       1
none            /tmp            tmpfs   defaults        0       0
none            /var/run        tmpfs   defaults        0       0
none            /var/lock       tmpfs   defaults        0       0
none            /var/tmp        tmpfs   defaults        0       0
            ";

         file "/etc/network/interfaces",
            content => "# automated generated file
auto lo eth0
iface lo inet loopback
iface eth0 inet dhcp
            ";

         cp "/etc/initramfs-tools/initramfs.conf", "/etc/initramfs-tools/initramfs.conf.bak";

         run "sed -ie 's/BOOT=local/BOOT=nfs/' /etc/initramfs-tools/initramfs.conf";
         run "sed -ie 's/MODULES=most/MODULES=netboot/' /etc/initramfs-tools/initramfs.conf";

         my $kversion = run "ls /boot/vmlinuz-* | perl -lne 'print \$1 if /vmlinuz-([0-9\.\-]+)-server/'";

         if(is_file("/etc/udev/rules.d/70-persistent-net.rules")) {
            rm "/etc/udev/rules.d/70-persistent-net.rules";
         }

         say "Generating new initramfs";
         run "rm -f /boot/initrd*";
         say join("\n", run "update-initramfs -c -k all -b /boot");

      }


      run "umount /proc";
      run "umount /sys";

      exit; # exit fork
   }
   else {
      waitpid($pid, 0);
      say "Long lost child came home... continuing work...";
      run "umount $::path/nfs-image/filesystem.d/dev";
   }

   say "Creating baseimgage";
   cp "nfs-image/filesystem.d/etc/initramfs-tools/initramfs.conf.bak", "nfs-image/filesystem.d/etc/initramfs-tools/initramfs.conf";
   run "cd nfs-image/filesystem.d; tar czf $::path/base-image/\L$dist-$version-$arch.tar.gz *";

   # make problems for nfs boot
   run "chmod 0 $::path/nfs-image/filesystem.d/etc/init.d/networking";

   file "$::path/nfs-image/filesystem.d/etc/rc.local",
      mode    => 777,
      content => "#!/bin/sh -e
export HOME=/root
/usr/bin/rex.io --module=Bootstrap 
      ";


   say "Populating tftpd-root";
   run "cp nfs-image/filesystem.d/boot/initrd* nfs-image/filesystem.d/boot/vmlinuz* tftpd-root";
   run "cp nfs-image/filesystem.d/usr/lib/syslinux/pxelinux.0 tftpd-root";

   my $kernel = run "ls tftpd-root/vmlinuz*";
   my $initrd = run "ls tftpd-root/initrd*";

   $kernel =~ s/^tftpd-root\///;
   $initrd =~ s/^tftpd-root\///;

   run "chmod -R 777 tftpd-root/*";

   file "$::path/tftpd-root/pxelinux.cfg/default",
      content => "
DEFAULT RexOsDeployment
  
LABEL RexOsDeployment
KERNEL $kernel
APPEND root=/dev/nfs initrd=$initrd nfsroot=IP-OF-YOUR-NFS-SERVER:$::path/nfs-image/filesystem.d ip=dhcp rw REXIO_BOOTSTRAP_FILE=http://IP-OF-YOUR-HTTP-SERVER/default.yml

";

   say "================================================================================";
   say "* You're installation image is now ready. Please follow the next steps";
   say "* ";
   say "* Now you've to setup your dhcp, tftpd, nfs and webserver.";
   say "* = DHCP: =";
   say "* ";
   say "* This is an example snippet for isc-dhcp-server";
   say "* 
subnet 192.168.0.0 netmask 255.255.255.0 {
        range 192.168.0.10 192.168.0.100;
        option broadcast-address 192.168.0.255;
        option routers 192.168.0.1;
        option domain-name-servers 192.168.0.1;

        filename \"/pxelinux.0\";
}";

   say "*\n*\n";
   say "* = TFTPD: =";
   say "* Point the TFTPd root directory to " . getcwd() . "/tftpd-root";
   say "* Examine the file tftpd-root/pxelinux.cfg/default and change it to suite your needs.";
   say "*\n*\n";
   say "* = HTTPd: =";
   say "* Copy the file base-image/*.tar.gz to your webserver root.";
   say "*\n*\n";
   say "* = NFS: =";
   say "* Configure your nfs server to export the nfs-image directory:";
   say "* \n";
   say "* $::path/nfs-image/filesystem.d     192.168.0.0/255.255.255.0(rw,no_root_squash,no_subtree_check,async,insecure)";
   say "*\n*\n";

}

1;
